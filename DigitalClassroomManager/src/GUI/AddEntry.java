/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import tools.Transparent;
import model.ClassRecord;
import model.CurrentUser;
import model.GradingSystem;
import model.Total;
import service.implementations.ClassRecordServiceImplementation;
import service.implementations.GradingSystemServiceImplementation;
import service.implementations.TotalServiceImplementation;
import service.interfaces.ClassRecordServiceInterface;
import service.interfaces.GradingSystemServiceInterface;
import service.interfaces.TotalServiceInterface;
import tools.ErrorException;

/**
 *
 * @author sam
 */
public class AddEntry extends javax.swing.JDialog {

    private String entryName;
    private GradingSystemServiceInterface gradingService;
    private GradingSystem gradingSys;
    private GradingSystem gradeFromCh;
    private UserHome cHome;
    private CurrentUser userCurrent;
    private ClassRecordServiceInterface classrecordService;
    private ClassRecord classrecord;
    private JFrame chFrame;
    private javax.swing.JFrame parentFrame;

    /**
     * Creates new form setRegCode
     */
    public AddEntry(java.awt.Frame parent, boolean modal, GradingSystem infoFromCHome, CurrentUser currentUser, javax.swing.JFrame prevFrame) {
        super(parent, modal);
        Transparent trans = new Transparent();
        trans.TransparentDForm(this);
        initComponents();
        this.setSize(350, 250);
        this.setLocationRelativeTo(null);
        gradeFromCh = infoFromCHome;
        userCurrent = currentUser;
        chFrame = prevFrame;
        getgrading();
    }

    public void getgrading() {
        int percentage = 100;
        gradingService = new GradingSystemServiceImplementation();
        GradingSystemServiceInterface gsServ = new GradingSystemServiceImplementation();
        ArrayList<GradingSystem> gradingSearch = new ArrayList<>();
        ArrayList<GradingSystem> gradingSearchID = new ArrayList<>();
        try {
            gradingSearchID = gsServ.getGradingSystem(gradeFromCh.getClassID());
            gradingSearch = gradingService.getGradingSystem();
        } catch (ErrorException ex) {
            ex.printStackTrace();
        }
        for (GradingSystem gsD : gradingSearchID) {

            percentage -= Integer.parseInt(gsD.getPercentage());

        }
        // if(percentage!=0&&percentage>0){
        percentageField.setText(String.valueOf(percentage));
        // }
        for (GradingSystem gsD : gradingSearch) {

            gradingsBox.addItem(gsD.getEntryName());
        }
    }

    private void closeDialog(java.awt.event.WindowEvent evt) {
        setVisible(false);
        dispose();
    }

    public String checkTheSpace(String str) {

        String newString = "";
        String temp;
        StringTokenizer var = new StringTokenizer(str);
        while (var.hasMoreTokens()) {
            temp = var.nextToken();
            if (!temp.equals(" ")) {
                newString += temp;
            }

        }
        return newString;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OK = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        percentageField = new javax.swing.JTextField();
        refresh = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        gradingsBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        OK.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/o.jpg"))); // NOI18N
        OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKActionPerformed(evt);
            }
        });
        getContentPane().add(OK);
        OK.setBounds(170, 150, 100, 30);

        cancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/cancel.jpg"))); // NOI18N
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });
        getContentPane().add(cancel);
        cancel.setBounds(170, 190, 100, 30);

        percentageField.setFont(new java.awt.Font("Maiandra GD", 0, 15)); // NOI18N
        percentageField.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                percentageFieldMouseClicked(evt);
            }
        });
        percentageField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                percentageFieldActionPerformed(evt);
            }
        });
        percentageField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                percentageFieldKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                percentageFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                percentageFieldKeyTyped(evt);
            }
        });
        getContentPane().add(percentageField);
        percentageField.setBounds(50, 110, 220, 30);

        refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/addAnotherEntry.jpg"))); // NOI18N
        refresh.setBorder(null);
        refresh.setBorderPainted(false);
        refresh.setContentAreaFilled(false);
        refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshActionPerformed(evt);
            }
        });
        getContentPane().add(refresh);
        refresh.setBounds(290, 70, 30, 30);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("%");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(280, 120, 20, 20);

        gradingsBox.setFont(new java.awt.Font("Maiandra GD", 0, 15)); // NOI18N
        getContentPane().add(gradingsBox);
        gradingsBox.setBounds(50, 70, 220, 30);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icon/pop.png"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 350, 250);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    int chckPer;
    private void OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKActionPerformed

        String testAd = percentageField.getText();
        if (testAd.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please provide a percentage for this entry!", "Error", JOptionPane.ERROR_MESSAGE);
            OK.requestFocus();
        } else {
            chckPer = gradeFromCh.getCheckPercentage() - Integer.parseInt(percentageField.getText());
            gradingSys = new GradingSystem();
            GradingSystem s = new GradingSystem();
            gradingService = new GradingSystemServiceImplementation();
            gradingSys.setEntryName(gradingsBox.getSelectedItem().toString());
            gradingSys.setClassID(gradeFromCh.getClassID());
            
            if (chckPer >= 0 && chckPer <= 100) {
                try {
                    s = gradingService.getGSfk(gradingsBox.getSelectedItem().toString(), gradeFromCh.getClassID());
                } catch (ErrorException ex) {
                    ex.printStackTrace();
                }
                if (s.isEmpty()) {
                    try {
                        gradingService.addGradingSystemEntry(gradingSys);
                    } catch (ErrorException ex) {
                        ex.printStackTrace();
                    }
                }
                gradingSys.setPercentage(percentageField.getText());
                try {
                    gradingService.updateGradingSystem(gradingSys);
                    s = gradingService.getGSfk(gradingsBox.getSelectedItem().toString(), gradeFromCh.getClassID());
                } catch (ErrorException ex) {
                    ex.printStackTrace();
                }


                if (!s.isEmpty()) {
                    gradingSys.setGsID(s.getGsID());
                    gradingSys.setClassID(gradeFromCh.getClassID());
                    gradingSys.setDone(true);
                }
                cHome = new UserHome(userCurrent, gradingSys);
                chFrame.setVisible(false);
                cHome.setGradingSystemView();
                cHome.setVisible(true);
                cHome.disableBack();
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(null, "Total percentage is up to 100% only!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_OKActionPerformed

    private void refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshActionPerformed
        // TODO add your handling code here:
        classrecordService = new ClassRecordServiceImplementation();
        classrecord = new ClassRecord();
        this.gradingsBox.removeAllItems();
        gradingService = new GradingSystemServiceImplementation();
        gradingSys = new GradingSystem();

        Object[] field = {"Entry"};
        String opt = JOptionPane.showInputDialog(null, field, "Add Entry", JOptionPane.PLAIN_MESSAGE);
        if (opt != null) {

            entryName = opt;
            if (!opt.isEmpty()) {
                try {
                    gradingSys = gradingService.getGSfk(opt, gradeFromCh.getClassID());
                } catch (ErrorException ex) {
                    ex.printStackTrace();
                }
                if (gradingSys.isEmpty()) {
                    gradingService = new GradingSystemServiceImplementation();
                    gradingSys = new GradingSystem();
                    classrecord.setClassID(gradeFromCh.getClassID());
                    classrecord.setColumnName(checkTheSpace(entryName));
                    gradingSys.setEntryName(entryName);
                    gradingSys.setClassID(gradeFromCh.getClassID());
                    try {
                        gradingService.addGradingSystemEntry(gradingSys);
                        classrecordService.addColumn(classrecord);
                    } catch (ErrorException ex) {
                        ex.printStackTrace();
                    }

                } else {
                }

            } else {
                JOptionPane.showMessageDialog(null, "Entry already exist!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        getgrading();
    }//GEN-LAST:event_refreshActionPerformed

    private void percentageFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_percentageFieldKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_percentageFieldKeyReleased

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private void percentageFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_percentageFieldActionPerformed
        // TODO add your handling code here:
        OK.doClick();
    }//GEN-LAST:event_percentageFieldActionPerformed

private void percentageFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_percentageFieldKeyTyped
    char c = evt.getKeyChar();

    if (!((c >= '0') && (c <= '9') || (c == KeyEvent.VK_BACK_SPACE)
            || (c == KeyEvent.VK_DELETE))) {
        getToolkit().beep();
        evt.consume();
    }
}//GEN-LAST:event_percentageFieldKeyTyped

private void percentageFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_percentageFieldKeyPressed
// TODO add your handling code here:
    char c = evt.getKeyChar();

    if (c == KeyEvent.VK_ENTER) {
        OK.doClick();
    }
}//GEN-LAST:event_percentageFieldKeyPressed

private void percentageFieldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_percentageFieldMouseClicked
    percentageField.setText(null);
}//GEN-LAST:event_percentageFieldMouseClicked
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton OK;
    private javax.swing.JButton cancel;
    private javax.swing.JComboBox gradingsBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField percentageField;
    private javax.swing.JButton refresh;
    // End of variables declaration//GEN-END:variables
}
